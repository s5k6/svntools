#!/bin/bash

# author: Stefan Klinger
#         Database & Information Systems (DBIS) Group
#         Uni Konstanz
# license: GNU Affero General Public License
#          file LICENSE, or <http://www.gnu.org/licenses/agpl-3.0.html>
#
# Subversion information:
# $HeadURL$
# $Date$

set -u -e -C;
shopt -s nullglob;

function err { echo "$@" >&2; exit 1; }
function warn { echo "$@" >&2; }

function ask_yN {
    local answer='';
    read -n 1 -s -p "$* [yN]" answer;
    if test "${answer}" = y; then
        echo yes;
        return 0;
    fi;
    echo no;
    return 1;
}



# This is the home of the repository
home='/home/svn/dbis';

# The name of the repos
name="${1:?need repository name}";

# Assert this repos exists.
test -d "${home}/repos/${name}" || err "No such repos";

# Assert the backup directory is there
test -d "${home}/old-repos" || err "No directory for old repositories";

# Check for existing backups with same name
find "${home}/old-repos" | grep -q "${name}" &&
    err 'collision with existing backup?';


# Ask the user: Sure?

cat <<EOF
======================================================================
EOF
ask_yN "Freeze (lock, backup & DELETE) repository ${1}?" || exit 0;



# Make backup of permissions file, and set new permissions so that
# exactly the caller of this script has exactly read permissions.

cat <<EOF
----------------------------------------------------------------------
setting permissions for exactly this user to make backup
EOF

cd ${home};

if test -r "access.d/${name}"; then
    cat "access.d/${name}" > "${home}/old-repos/${name}.access";
    chmod 440 "${home}/old-repos/${name}.access";
else
    warn "No old access file.  Not backed up.";
fi;

tee "access.d/${name}" <<EOF;
[${name}:/]
${USER} = r
EOF
./mkaccess;



# Do a export of latest revision, and compress into `${name}.tar.bz2`

cat <<EOF
----------------------------------------------------------------------
creating snapshot of last revision
EOF

cd "${home}/old-repos";
svn export "https://svn.uni-konstanz.de/dbis/${name}";

echo 'compressing'
tar -c "${name}" | bzip2 > "${name}.tar.bz2";
rm -rf "${name}";
chmod 440 "${name}.tar.bz2";



# Do a dump of entire repos, and compress into `${name}.dump.bz2`

cat <<EOF
----------------------------------------------------------------------
dumping entire repository
EOF

svnadmin dump "${home}/repos/${name}" | bzip2 > "${name}.dump.bz2";
chmod 440 "${name}.dump.bz2";



# Do a plain file system level copy of the repos, and compress into
# `${name}.repos.tar.bz2`.  The trick with the symlink is required to
# create a tar archive whose only member is named like the archive.

cat <<EOF
----------------------------------------------------------------------
tarring entire repository
EOF

ln -s "${home}/repos/${name}" "${name}.repos";
tar -hc "${name}.repos" | bzip2 > "${name}.repos.tar.bz2";
rm "${name}.repos";
chmod 440 "${name}.repos.tar.bz2";



# “Remove” repos.  Lacking sufficient permissions, we simply move it
# to the `DELETE_ME` subdir.  Occasionally, some Admin has todelete
# that.

cat <<EOF
----------------------------------------------------------------------
removing repos
EOF

cd "${home}";
rm "access.d/${name}";
./mkaccess;
mkdir -p repos/DELETE_ME/;
mv "repos/${name}" "repos/DELETE_ME/${name}_$(date +'%Y%m%dT%H%M%S%z')";



# Done, show generated backup files.

cat <<EOF
----------------------------------------------------------------------
done
EOF
ls -l ${home}/old-repos/${name}.*
